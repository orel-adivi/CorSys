RUNNING ALL BENCHMARKS OF CorSys:

======================================================================
BENCHMARK: benchmark_1
DESCRIPTION: This is a sanity benchmark, testing integer expression synthesis with DefaultMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 0.9062473773956299 s):
x + y + z
----------------------------------------------------------------------
Ran Examples2 successfully (in 0.9218747615814209 s):
y + 1 + (1 - x)
----------------------------------------------------------------------
Ran Examples3 successfully (in 0.9062511920928955 s):
-z
----------------------------------------------------------------------
Ran Examples4 successfully (in 0.9062502384185791 s):
x * z + y * z
----------------------------------------------------------------------
Ran Examples5 successfully (in 0.9062497615814209 s):
z // y

======================================================================
BENCHMARK: benchmark_2
DESCRIPTION: This benchmark tests float expression synthesis with DefaultMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 0.9062485694885254 s):
x + y + z
----------------------------------------------------------------------
Ran Examples2 successfully (in 0.906235933303833 s):
y + 1 + (1 - x)
----------------------------------------------------------------------
Ran Examples3 successfully (in 0.9218883514404297 s):
-(z / x)
----------------------------------------------------------------------
Ran Examples4 successfully (in 0.9375007152557373 s):
x * z + y / z
----------------------------------------------------------------------
Ran Examples5 successfully (in 0.9062559604644775 s):
z ** y

======================================================================
BENCHMARK: benchmark_3
DESCRIPTION: This benchmark tests string-related expression synthesis with DefaultMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 0.9374942779541016 s):
sorted(y)[-1]
----------------------------------------------------------------------
Ran Examples2 successfully (in 0.9375014305114746 s):
len(x) + -1
----------------------------------------------------------------------
Ran Examples3 successfully (in 0.9374973773956299 s):
y[0] + x[-1]
----------------------------------------------------------------------
Ran Examples4 successfully (in 0.9218554496765137 s):
x[None:None:-1] + y[None:None:-1]
----------------------------------------------------------------------
Ran Examples5 successfully (in 0.9374992847442627 s):
sorted(x + y)

======================================================================
BENCHMARK: benchmark_4
DESCRIPTION: This benchmark tests list-related expression synthesis with DefaultMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 0.9375214576721191 s):
sorted(x) + [0]
----------------------------------------------------------------------
Ran Examples2 successfully (in 0.9375011920928955 s):
len(x + y)
----------------------------------------------------------------------
Ran Examples3 successfully (in 1.1117711067199707 s):
x[None:None:-1]
----------------------------------------------------------------------
Ran Examples4 successfully (in 0.9062566757202148 s):
x[None:None:2]
----------------------------------------------------------------------
Ran Examples5 successfully (in 0.9531393051147461 s):
x[2:None:None] + y[-1:None:None]

======================================================================
BENCHMARK: benchmark_5
DESCRIPTION: This is a numerical error benchmark, testing float expression synthesis with NormalMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 4.82810640335083 s):
x + y + z
----------------------------------------------------------------------
Ran Examples2 successfully (in 5.6085524559021 s):
y + 1.0 + (1.0 - x)
----------------------------------------------------------------------
Ran Examples3 successfully (in 5.765609502792358 s):
-(z / x)
----------------------------------------------------------------------
Ran Examples4 successfully (in 5.328139781951904 s):
x * z + y / z
----------------------------------------------------------------------
Ran Examples5 successfully (in 7.093729734420776 s):
z ** y

======================================================================
BENCHMARK: benchmark_6
DESCRIPTION: This is a calculation error benchmark, testing integer expression synthesis with CalculationMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 0.9843828678131104 s):
x + y + z
----------------------------------------------------------------------
Ran Examples2 successfully (in 0.9687426090240479 s):
y + 1 + (1 - x)
----------------------------------------------------------------------
Ran Examples3 successfully (in 0.9999988079071045 s):
-z
----------------------------------------------------------------------
Ran Examples4 successfully (in 0.9843800067901611 s):
x * z + y * z
----------------------------------------------------------------------
Ran Examples5 successfully (in 0.9843716621398926 s):
z // y

======================================================================
BENCHMARK: benchmark_7
DESCRIPTION: This is a typo benchmark, testing string expression synthesis with LevenshteinMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 49.1406033039093 s):
sorted(y)[-1]
----------------------------------------------------------------------
Ran Examples2 successfully (in 85.40796542167664 s):
x + y
----------------------------------------------------------------------
Ran Examples3 successfully (in 81.54804873466492 s):
y[0] + x[-1]
----------------------------------------------------------------------
Ran Examples4 successfully (in 77.34679579734802 s):
x[None:None:-1] + y[None:None:-1]
----------------------------------------------------------------------
Ran Examples5 successfully (in 75.64061784744263 s):
x[None:None:2] + y[None:None:-1]

======================================================================
BENCHMARK: benchmark_8
DESCRIPTION: This is a typo benchmark, testing string expression synthesis with KeyboardMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 49.93545150756836 s):
sorted(y)[-1]
----------------------------------------------------------------------
Ran Examples2 successfully (in 82.65374422073364 s):
x + y
----------------------------------------------------------------------
Ran Examples3 successfully (in 81.60937833786011 s):
y[0] + x[-1]
----------------------------------------------------------------------
Ran Examples4 successfully (in 76.37499642372131 s):
x[None:None:-1] + y[None:None:-1]
----------------------------------------------------------------------
Ran Examples5 successfully (in 77.07810401916504 s):
x[None:None:2] + y[None:None:-1]

======================================================================
BENCHMARK: benchmark_9
DESCRIPTION: This is a typo benchmark, testing string expression synthesis with HomophoneMetric.

Running tests:
----------------------------------------------------------------------
Ran Examples1 successfully (in 48.765644788742065 s):
sorted(y)[-1]
----------------------------------------------------------------------
Ran Examples2 successfully (in 81.43616437911987 s):
x + y
----------------------------------------------------------------------
Ran Examples3 successfully (in 81.9531033039093 s):
y[0] + x[-1]
----------------------------------------------------------------------
Ran Examples4 successfully (in 76.14064145088196 s):
x[None:None:-1] + y[None:None:-1]
----------------------------------------------------------------------
Ran Examples5 successfully (in 76.1406078338623 s):
x[None:None:2] + y[None:None:-1]

======================================================================
45 tests out of 45 tests were successful.
ALL TESTS RAN SUCCESSFULLY.
